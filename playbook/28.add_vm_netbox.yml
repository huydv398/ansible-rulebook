- hosts: localhost
  gather_facts: False
  module_defaults:
    group/community.vmware.vmware:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      #datacenter: "{{ datacenter_name }}"
      validate_certs: false
    group/netbox.netbox.netbox:
      netbox_url: '{{ netbox_url }}'
      netbox_token: '{{ netbox_token }}'
      validate_certs: no

  vars:
    - name_vm: "{{ ansible_eda.event.payload.backlog[0].fields.name_vm }}"
    - Cluster_Type: VMware
  tasks:
    - name: Gather one specific VM
      community.vmware.vmware_vm_info:
        vm_name: '{{ name_vm }}'
      delegate_to: localhost
      register: vm_info

    - name: debug specific VM
      debug:
        msg: "{{ vm_info.virtual_machines[0] }}"  

    - name: Set fact Cluster of VM
      set_fact:
        clusters_vm: "{{ vm_info.virtual_machines[0].cluster }}"

    - name: Look up the VM called VM in the inventory
      register: search_result
      vmware.vmware_rest.vcenter_vm_info:
        vcenter_hostname: '{{ vcenter_hostname }}'
        vcenter_username: '{{ vcenter_username }}'
        vcenter_password: '{{ vcenter_password }}'
        vcenter_validate_certs: false      
        filter_names:
        - "{{ name_vm }}"

    - name: Collect information about a specific VM
      vmware.vmware_rest.vcenter_vm_info:
        vcenter_hostname: '{{ vcenter_hostname }}'
        vcenter_username: '{{ vcenter_username }}'
        vcenter_password: '{{ vcenter_password }}'
        vcenter_validate_certs: false
        vm: '{{ search_result.value[0].vm }}'
      register: test_vm1_info

    - name: Get guest power information
      vmware.vmware_rest.vcenter_vm_power_info:
        vcenter_hostname: '{{ vcenter_hostname }}'
        vcenter_username: '{{ vcenter_username }}'
        vcenter_password: '{{ vcenter_password }}'
        vcenter_validate_certs: false
        vm: '{{ test_vm1_info.id }}'
      register: result_vm_power

    - name: Display cluster information
      debug:
        var: result_vm_power    

    - name: Turn the power of the VM on
      vmware.vmware_rest.vcenter_vm_power:
        vcenter_hostname: '{{ vcenter_hostname }}'
        vcenter_username: '{{ vcenter_username }}'
        vcenter_password: '{{ vcenter_password }}'
        vcenter_validate_certs: false
        state: start
        vm: '{{ search_result.value[0].vm }}'
      when: result_vm_power.value.state == "POWERED_OFF"
    
    - name: Gather disk info from virtual machine using name
      community.vmware.vmware_guest_disk_info:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        datacenter: "{{ clusters_vm }}"
        validate_certs: false
        name: "{{name_vm}}"
      delegate_to: localhost
      register: "disk_info"

    - name: Set fact Cluster of VM
      set_fact:
        vcpus: "{{ test_vm1_info.value.cpu.count }}"
        guest_OS: "{{ test_vm1_info.value.guest_OS }}"
        memory: "{{ test_vm1_info.value.memory.size_MiB }}"
        # id: "{{ test_vm1_info.value.id }}"
        disk: "{{ disk_info.guest_disk_info['0'].capacity_in_kb / (1024*1024) }} "

    - name: Collect the IPv4 network information
      vmware.vmware_rest.appliance_networking_interfaces_info:
        vcenter_hostname: '{{ vcenter_hostname }}'
        vcenter_username: '{{ vcenter_username }}'
        vcenter_password: '{{ vcenter_password }}'
        vcenter_validate_certs: false 
        # interface_name: nic0
      register: result_ip
    - name: Set fact IPv4
      set_fact:
        IP_vm: "{{ result_ip.value[0].ipv4.address }}/{{ result_ip.value[0].ipv4.prefix }}"
        int_name: "{{ result_ip.value[0].name }}"
      when: result_ip is defined

    - name: Create cluster type within NetBox with only required information
      netbox.netbox.netbox_cluster_type:
        data:
          name: "{{ Cluster_Type }}"
        state: present

    - name: "Get Clusters"
      set_fact:
        clusters: "{{ query('netbox.netbox.nb_lookup', 'clusters',
                  api_endpoint=netbox_url,
                  validate_certs=False,
                  token=netbox_token) | map(attribute='value.display') | list }}"

    - name: Create cluster within NetBox with only required information
      netbox.netbox.netbox_cluster:
        data:
          name: '{{ clusters_vm }}'
          cluster_type: "{{ Cluster_Type }}"
        state: present
      when: "clusters_vm not in clusters"

    - name: Create virtual machine within NetBox with only required information
      netbox.netbox.netbox_virtual_machine:
        data:
          name: '{{ name_vm }}'
          cluster: '{{ clusters_vm }}'
          vcpus: '{{ vcpus }}'
          memory: '{{ memory }}'
          disk: '{{ disk | int}}'
        state: present
    - name: Create interface within NetBox with only required information
      netbox.netbox.netbox_vm_interface:
        data:
          virtual_machine: '{{ name_vm }}'
          name: '{{ int_name }}'
        state: present

    - name: Add IP address to a virtual machine
      netbox.netbox.netbox_ip_address:
        data:
          address: "{{ IP_vm }}"                 
          status: "active"                            
          assigned_object: 
            virtual_machine: '{{ name_vm }}'
            name: '{{ int_name }}'
      # register: ip_result
      when: IP_vm is defined