- name: Create VM for vCenter
  gather_facts: False
  connection: local
  hosts: localhost
  vars:
    - squest_api: "http://172.16.66.138/api/"
    - squest_token: de7e71c199dbe810c862ecc331f7201fb2cd81dd
    - squest_bearer_token: "Bearer {{ squest_token }}"
    - hostname: "{{ lookup('ansible.builtin.env', 'VMWARE_HOST') }}"
    - username: "{{ lookup('ansible.builtin.env', 'VMWARE_USER') }}"
    - password: "{{ lookup('ansible.builtin.env', 'VMWARE_PASSWORD') }}"
    # - ova_validate_certs: "{{ lookup('ansible.builtin.env', 'OVA_VALIDATE_CERTS') | default('False') }}"
    # - datacenter: "{{ lookup('ansible.builtin.env', 'VMWARE_DATACENTER') | default('Datacenter') }}"
    - cluster: "SUN-Cluster"
    - folder: "huydv3"
    - datastore_tmp: "DATA02"
    # - size_gb: 20
    - vm_disk_type: thin
    - vm_disk_datastore: 'DATA02'
    - vm_hardware_controller: paravirtual
    # - memory_mb: 2048
    # - num_cpus: 2

    - template: |-
        {%- if os_vm == "Centos" -%}
        Temp-C7
        {%- elif os_vm == "Ubuntu22.04" -%}
        TEMP-U22 
        {%- elif os_vm == "Ubuntu24.04" -%}
        TEMP-U24
        {%- elif os_vm == "Windows-Server-22" -%}
        TEMP-WIN2019
        {%- else -%}
        other_value
        {%- endif -%}
    # - guest_id: |-
    #     {%- if ansible_eda.event.payload.data.platform.id == 13 -%}
    #     centos7_64Guest
    #     {%- elif ansible_eda.event.payload.data.platform.id == 11 -%}
    #     ubuntu64Guest
    #     {%- else -%}
    #     other_value
    #     {%- endif -%}
    
    
    # - guest_id: centos7_64Guest
    
  tasks:
    - name: test
      debug:
        msg: "{{ hostname }} {{ username }} {{ password }} {{ os_vm }} {{ os_vm }} "   
    - name: test 2
      debug:
        msg: "{{ template }} "   

    - name: Create a New Virtual Machine
      vmware_guest:
        hostname: '{{ hostname }}'
        username: '{{ username }}'
        password: '{{ password }}'
        validate_certs: 'False'
        datacenter: 'Datacenter'
        cluster: "{{ cluster }}"
        folder: '{{ folder }}'
        template: '{{ template }}'
        datastore: '{{ datastore_tmp }}'
        name: "{{ squest.request.instance.name }}"
        # guest_id: '{{ guest_id }}'
        disk:
          - size_gb: '{{ size_gb }}'
            type: '{{ vm_disk_type }}'
            datastore: '{{ vm_disk_datastore }}'
        hardware:
          memory_mb: '{{ memory_gb * 1024 }}'  # Convert GB to MB
          num_cpus: '{{ num_cpus }}'
          scsi: '{{ vm_hardware_controller }}'
        state: poweredon
        # wait_for_customization: yes # tự động bật máy ảo khi hoàn thành
      register: status
      delegate_to: localhost
    - name: Get all resource group
      uri:
        url: "{{ squest_api }}resource-tracker/resource-group/"
        headers:
          Authorization: "{{ squest_bearer_token }}"
        method: PUT
        body: |
          {
            "name": "{{ squest.request.instance.name }}",
            "resource_type": "VMware",
            "resource_name": "{{ status.instance.name }}"
            "description": "Resource group for VM {{ status.instance.name }}"
            "raw_data": {
              "vmware": {
                "datacenter": "{{ datacenter }}",
                "cluster": "{{ cluster }}",
                "folder": "{{ folder }}",
                "datastore": "{{ datastore_tmp }}",
                "template": "{{ template }}",
                "guest_id": "{{ guest_id }}"
              }
            }
            "virtual_machine": {
              "name": "{{ status.instance.name }}",
              "power_state": "{{ status.instance.power_state }}",
              "hardware": {
                "memory_mb": "{{ status.instance.hardware.memory_mb }}",
                "num_cpus": "{{ status.instance.hardware.num_cpus }}",
                "disk": [
                  {
                    "size_gb": "{{ status.instance.hardware.disks[0].size_gb }}"
                  }
                ],
                "scsi": "{{ status.instance.hardware.scsi }}"
              }
            }
          }
        status_code: 200
        body_format: json
      register: output


    # - name: Create a VM folder on given datacenter
    #   # debug:
    #   #   msg: "{{ template }} {{ guest_id }}"
    #   community.vmware.vcenter_folder:
    #     hostname: '{{ vcenter_server }}'
    #     username: '{{ vcenter_user }}'
    #     password: '{{ vcenter_pass }}'
    #     validate_certs: '{{ ova_validate_certs }}'
    #     datacenter: "{{ datacenter }}"
    #     folder_name: "{{ ansible_eda.event.payload.data.tenant.name }}"
    #     folder_type: vm
    #     state: present
    # - name: Create a New Virtual Machine
    #   vmware_guest:
    #     hostname: '{{ vcenter_server }}'
    #     username: '{{ vcenter_user }}'
    #     password: '{{ vcenter_pass }}'
    #     validate_certs: '{{ ova_validate_certs }}'
    #     datacenter: '{{ datacenter }}'
    #     cluster: "{{ ansible_eda.event.payload.data.cluster.name }}"
    #     folder: '{{ ansible_eda.event.payload.data.tenant.name }}'
    #     template: '{{ template }}'
    #     datastore: '{{ datastore_tmp }}'
    #     name: '{{ ansible_eda.event.payload.data.name | upper }}'
    #     guest_id: '{{ guest_id }}'
    #     disk:
    #       - size_gb: '{{ ansible_eda.event.payload.data.disk }}'
    #         type: '{{ vm_disk_type }}'
    #         datastore: '{{ vm_disk_datastore }}'
    #     hardware:
    #       memory_mb: '{{ ansible_eda.event.payload.data.memory }}'
    #       num_cpus: '{{ ansible_eda.event.payload.snapshots.postchange.vcpus }}'
    #       scsi: '{{ vm_hardware_controller }}'
    #     state: poweredon
    #     # wait_for_customization: yes # tự động bật máy ảo khi hoàn thành
    #   register: status
    #   delegate_to: localhost
    # - name: Push out event
    #   set_fact:
    #     cacheable: true #phản hồi lại eda 1 event có value
    #     output_status: "{{status}}"
    #     eda: "{{ansible_eda.event.payload}}"